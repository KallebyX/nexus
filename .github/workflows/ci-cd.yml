name: Oryum Nexus CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DEPLOYMENT_BRANCH: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  test:
    name: 🧪 Tests & Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run health check
      run: npm run health:check

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Check test coverage
      run: |
        COVERAGE=$(npm run test -- --coverage --silent | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum 80%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum requirement"
        fi

    - name: Generate AI documentation
      run: npm run ai:docs
      if: github.ref == 'refs/heads/main'

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json | grep -q '"vulnerabilities"'; then
          echo "❌ Security vulnerabilities found"
          npm audit
          exit 1
        else
          echo "✅ No high-level vulnerabilities found"
        fi

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          .next/
        retention-days: 1

  deploy:
    name: 🚀 Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

    - name: Update Trello card
      if: success()
      run: |
        curl -X PUT \
          "https://api.trello.com/1/cards/${{ secrets.TRELLO_CARD_ID }}/desc" \
          -H "Accept: application/json" \
          -d "key=${{ secrets.TRELLO_API_KEY }}" \
          -d "token=${{ secrets.TRELLO_TOKEN }}" \
          -d "value=✅ Deploy realizado com sucesso em ${{ github.ref == 'refs/heads/main' && 'PRODUÇÃO' || 'STAGING' }} - $(date)"

    - name: Notify deployment success
      if: success() && github.ref == 'refs/heads/main'
      run: |
        echo "🎉 Deploy em produção realizado com sucesso!"
        echo "🔗 URL: https://${{ secrets.VERCEL_DOMAIN }}"

  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback deployment
      run: |
        echo "🚨 Deploy falhou, iniciando rollback..."
        # Implementar lógica de rollback aqui
        
    - name: Notify rollback
      run: |
        echo "⚠️ Rollback executado devido a falha no deploy"